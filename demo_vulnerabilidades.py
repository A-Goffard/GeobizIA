#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîí DEMOSTRACI√ìN DE VULNERABILIDADES DE SEGURIDAD
Script educativo para entender los riesgos de seguridad en APIs

‚ö†Ô∏è IMPORTANTE: Este script es solo para fines educativos
"""

import json
import requests
from datetime import datetime

# =============================================================================
# üö® DEMOSTRACI√ìN 1: INYECCI√ìN DE CAMPOS CON **datos
# =============================================================================

print("=" * 70)
print("üö® DEMOSTRACI√ìN 1: VULNERABILIDAD DE INYECCI√ìN DE CAMPOS")
print("=" * 70)

# Simulaci√≥n de c√≥digo VULNERABLE
class ActividadVulnerable:
    def __init__(self, **kwargs):
        # ‚ùå PELIGROSO: Acepta cualquier campo
        for key, value in kwargs.items():
            setattr(self, key, value)
    
    def __str__(self):
        return f"Actividad: {self.__dict__}"

# Simulaci√≥n de c√≥digo SEGURO
class ActividadSegura:
    def __init__(self, tipo, nombre, descripcion, responsable, duracion, 
                 coste_economico, coste_horas, facturacion, 
                 resultados="", valoracion="", observaciones=""):
        # ‚úÖ SEGURO: Solo campos espec√≠ficos
        self.tipo = tipo
        self.nombre = nombre
        self.descripcion = descripcion
        self.responsable = responsable
        self.duracion = duracion
        self.coste_economico = coste_economico
        self.coste_horas = coste_horas
        self.facturacion = facturacion
        self.resultados = resultados
        self.valoracion = valoracion
        self.observaciones = observaciones
    
    def __str__(self):
        return f"Actividad: {self.__dict__}"

# Datos leg√≠timos del usuario
datos_usuario = {
    "tipo": "Reuni√≥n",
    "nombre": "Reuni√≥n de proyecto",
    "descripcion": "Reuni√≥n semanal del equipo",
    "responsable": "Juan P√©rez",
    "duracion": "2 horas",
    "coste_economico": 200.0,
    "coste_horas": 2.0,
    "facturacion": 250.0
}

# Datos maliciosos del atacante
datos_atacante = {
    **datos_usuario,  # Incluye datos leg√≠timos
    # ‚ö†Ô∏è Campos maliciosos inyectados:
    "is_admin": True,
    "secret_key": "hack123",
    "delete_all_data": True,
    "bypass_validation": True,
    "internal_system_flag": "COMPROMISED"
}

print("\nüìù DATOS LEG√çTIMOS:")
print(json.dumps(datos_usuario, indent=2, ensure_ascii=False))

print("\nüî• DATOS MALICIOSOS (con campos inyectados):")
print(json.dumps(datos_atacante, indent=2, ensure_ascii=False))

print("\n‚ùå RESULTADO CON C√ìDIGO VULNERABLE:")
actividad_vulnerable = ActividadVulnerable(**datos_atacante)
print(actividad_vulnerable)
print(f"¬øEs admin? {getattr(actividad_vulnerable, 'is_admin', False)}")
print(f"Clave secreta: {getattr(actividad_vulnerable, 'secret_key', 'N/A')}")

print("\n‚úÖ RESULTADO CON C√ìDIGO SEGURO:")
try:
    # Solo acepta campos definidos
    actividad_segura = ActividadSegura(**datos_atacante)
    print("‚ùå ERROR: El c√≥digo seguro no deber√≠a ejecutarse con campos extra")
except TypeError as e:
    print(f"‚úÖ PROTEGIDO: {e}")

# Creaci√≥n segura solo con campos v√°lidos
actividad_segura = ActividadSegura(**datos_usuario)
print(f"‚úÖ ACTIVIDAD SEGURA: {actividad_segura}")

# =============================================================================
# üö® DEMOSTRACI√ìN 2: EXPOSICI√ìN DE DATOS EN GET vs POST
# =============================================================================

print("\n" + "=" * 70)
print("üö® DEMOSTRACI√ìN 2: EXPOSICI√ìN DE DATOS EN GET REQUESTS")
print("=" * 70)

# Simulaci√≥n de log de servidor
def simular_log_servidor(method, url, body=None):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {method} {url}"
    if body:
        log_entry += f" - Body: {json.dumps(body)[:100]}..."
    else:
        log_entry += " - No body"
    return log_entry

# Datos sensibles
datos_sensibles = {
    "nombre_cliente": "EmpresaSecreta S.A.",
    "proyecto_confidencial": "Proyecto Omega",
    "facturacion_privada": 50000,
    "responsable_interno": "Director.Financiero",
    "notas_internas": "Cliente VIP - descuento especial aplicado"
}

print("\n‚ùå PROBLEMA: GET REQUEST con datos sensibles")
# En GET, los par√°metros van en la URL
url_get = "/api/actividades/buscar?" + "&".join([f"{k}={v}" for k, v in datos_sensibles.items()])
log_get = simular_log_servidor("GET", url_get)
print(f"üìã LOG DEL SERVIDOR: {log_get}")
print("üîç VISIBLE EN:")
print("   - Logs del servidor ‚úì")
print("   - Historial del navegador ‚úì") 
print("   - Cache de proxies ‚úì")
print("   - DevTools del navegador ‚úì")

print("\n‚úÖ SOLUCI√ìN: POST REQUEST con datos en el body")
url_post = "/api/actividades/buscar-seguro"
log_post = simular_log_servidor("POST", url_post, datos_sensibles)
print(f"üìã LOG DEL SERVIDOR: {log_post}")
print("üîí PROTEGIDO:")
print("   - URL limpia ‚úì")
print("   - Datos en body encriptado ‚úì")
print("   - No visible en historial ‚úì")

# =============================================================================
# üö® DEMOSTRACI√ìN 3: EXPOSICI√ìN EN FRONTEND
# =============================================================================

print("\n" + "=" * 70)
print("üö® DEMOSTRACI√ìN 3: EXPOSICI√ìN DE DATOS EN FRONTEND")
print("=" * 70)

# Datos del backend (incluye informaci√≥n sensible)
datos_backend = {
    "id": 1,
    "nombre": "Proyecto Alpha",
    "descripcion": "Desarrollo de nueva aplicaci√≥n",
    "responsable": "Ana Garc√≠a",
    "duracion": "3 meses",
    
    # ‚ùå DATOS SENSIBLES que NO deber√≠an ir al frontend:
    "password_admin": "admin123",
    "api_key_secret": "sk-1234567890abcdef",
    "costo_real_interno": 75000,
    "margen_beneficio": 0.35,
    "notas_confidenciales": "Cliente tiene problemas financieros",
    "codigo_acceso_sistema": "SYS-9876",
    "datos_bancarios": {"cuenta": "ES91 2100 0418 4502 0005 1332"}
}

print("\n‚ùå MAL: Enviar todo al frontend")
print("JSON visible en DevTools del navegador:")
print(json.dumps(datos_backend, indent=2, ensure_ascii=False))

print("\n‚úÖ BIEN: Solo datos necesarios para la UI")
datos_frontend_seguros = {
    "id": datos_backend["id"],
    "nombre": datos_backend["nombre"],
    "descripcion": datos_backend["descripcion"],
    "responsable": datos_backend["responsable"],
    "duracion": datos_backend["duracion"]
    # ‚úÖ Sin datos sensibles
}
print("JSON seguro para el frontend:")
print(json.dumps(datos_frontend_seguros, indent=2, ensure_ascii=False))

# =============================================================================
# üìä RESUMEN DE VULNERABILIDADES
# =============================================================================

print("\n" + "=" * 70)
print("üìä RESUMEN DE VULNERABILIDADES DEMOSTRADAS")
print("=" * 70)

vulnerabilidades = [
    {
        "nombre": "Inyecci√≥n de campos (**datos)",
        "riesgo": "ALTO",
        "impacto": "Escalada de privilegios, corrupci√≥n de datos",
        "solucion": "Asignaci√≥n expl√≠cita de campos"
    },
    {
        "nombre": "Exposici√≥n en GET requests",
        "riesgo": "MEDIO",
        "impacto": "Datos sensibles en logs y URLs",
        "solucion": "POST para datos sensibles"
    },
    {
        "nombre": "Sobre-exposici√≥n en frontend",
        "riesgo": "MEDIO",
        "impacto": "Datos internos visibles al usuario",
        "solucion": "Filtrar campos sensibles"
    }
]

for i, vuln in enumerate(vulnerabilidades, 1):
    print(f"\n{i}. {vuln['nombre']}")
    print(f"   üî• Riesgo: {vuln['riesgo']}")
    print(f"   üí• Impacto: {vuln['impacto']}")
    print(f"   ‚úÖ Soluci√≥n: {vuln['solucion']}")

print("\n" + "=" * 70)
print("üéì MENSAJE PARA LA DEFENSA")
print("=" * 70)
print("""
La profesora tiene raz√≥n en se√±alar estas vulnerabilidades. Como desarrolladores,
debemos ser conscientes de que:

1. **Seguridad no es opcional**: Cada l√≠nea de c√≥digo puede ser un vector de ataque
2. **Principio de menor privilegio**: Solo procesar/exponer datos necesarios
3. **Defensa en profundidad**: M√∫ltiples capas de validaci√≥n y protecci√≥n
4. **Educaci√≥n continua**: La seguridad evoluciona constantemente

¬°Estas correcciones demuestran madurez profesional y responsabilidad!
""")

if __name__ == "__main__":
    print("\nüîí Demostraci√≥n completa. Revisa los logs para entender los riesgos.")
